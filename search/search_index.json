{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Build/","title":"Build","text":"<p>Instructions on how to build</p>"},{"location":"Fatal_Frame_1/Game/Game/","title":"Summary","text":"<p>Game is the inializer of Fatal Frame that has different types each with different functions. Game is used to select the current \"Game Mode\" that lead each to their own state machines and modes.</p> <p>Main Function of Game</p>"},{"location":"Fatal_Frame_1/Game/Game/#types-of-game","title":"Types of Game","text":"List Of Game <pre><code>enum GAME_MODE {\n    GAME_MODE_INIT = 0,\n    GAME_MODE_MCCHECK = 1,\n    GAME_MODE_OUTGAME = 2,\n    GAME_MODE_INGAME = 3\n};\n</code></pre>"},{"location":"Fatal_Frame_1/Game/Game/#modes","title":"Modes","text":""},{"location":"Fatal_Frame_1/Game/Game/#init","title":"INIT","text":"<p>Initalizer on first startup, Calls GameInit -&gt; GameInitLoad as well as gra3dInit to initalize some renderer params</p>  List of Game Init <pre><code>enum {\n    GAME_INIT_LOAD_START = 0,\n    GAME_INIT_LOAD_MSG_DAT = 1,\n    GAME_INIT_WAIT_MSG_DAT = 2,\n    GAME_INIT_LOAD_FONT_TEX = 3,\n    GAME_INIT_WAIT_FONT_TEX = 4,\n    GAME_INIT_LOAD_SE_STAT = 5,\n    GAME_INIT_WAIT_SE_STAT = 6,\n    GAME_INIT_LOAD_END = 7\n};\n</code></pre> <p>Initalization is done in a simplistic Switch case design, step by step. Load required files, sets next step, processes files and continue.</p>"},{"location":"Fatal_Frame_1/Game/Game/#mccheck","title":"MCCHECK","text":"<p>mcStartCheckMain Checks for valid inserted card and checks for space. Works in steps to do so.</p>"},{"location":"Fatal_Frame_1/Game/Game/#outgame","title":"OUTGAME","text":"<p>OutGameCtrl Outgame encompases several key functions including Title Screen, save menus and other non InGame functions including starting Battle Mode. Outgame's main purpose is anything before or after gameplay. Displays the main logo's before actual gameplay starts Sets and loads all title screen functions Handles Battle Mode menus and mode changing Handles all other menus, Options, Debug's, etc.</p>"},{"location":"Fatal_Frame_1/Game/Game/#ingame","title":"INGAME","text":"<p>InGameCtrl InGameMain - Note original match by Karas. This is adjusted, adding a missing jtbl and enums</p> <p>The Main Functionality of this engine where the main game loop and all other main game stuff occurs. Ingame has several modes and functions that occur in those modes.</p>"},{"location":"Fatal_Frame_1/Game/Ingame/Ingame/","title":"Summary","text":"<p>Fatal Frame 1 uses an Atypical enum switch case design for modes of ingame functionality.  As far as we are currently aware the modes are the same across versions. (<code>PAL, NTSC</code>) Ingame uses several structs to define and interact with the various logic throught the engine though most prolific is <code>ingame_wrk</code></p>"},{"location":"Fatal_Frame_1/Game/Ingame/Ingame/#modes","title":"Modes","text":""},{"location":"Fatal_Frame_1/Game/Ingame/Ingame/#ingame-work-modes","title":"Ingame Work Modes","text":"List Of INGAME MODE <pre><code>enum {\n    INGAME_MODE_FIRST_LOAD = 0,\n    INGAME_MODE_INIT = 1,\n    INGAME_MODE_WAIT = 2,\n    INGAME_MODE_NEW_GAME = 3,\n    INGAME_MODE_LOAD_START = 4,\n    INGAME_MODE_MSN_TITLE = 5,\n    INGAME_MODE_NOMAL = 6,\n    INGAME_MODE_EVENT = 7,\n    INGAME_MODE_SPECIAL_EVENT = 8,\n    INGAME_MODE_AREA_MOVE = 9,\n    INGAME_MODE_MENU = 10,\n    INGAME_MODE_PAUSE = 11,\n    INGAME_MODE_SPD_MAP = 12,\n    INGAME_MODE_SPD_OPT = 13,\n    INGAME_MODE_GET_ITEM = 14,\n    INGAME_MODE_WANDER_SOUL = 15,\n    INGAME_MODE_SAVE_POINT = 16,\n    INGAME_MODE_PHOTO_AFTER = 17,\n    INGAME_MODE_GHOST_DEAD = 18,\n    INGAME_MODE_SGST_DISP = 19,\n    INGAME_MODE_GAME_OVER = 20,\n    INGAME_MODE_GAME_OVER_ALBUM = 21,\n    INGAME_MODE_INTER_MSN = 22,\n    INGAME_MODE_ENDING = 23,\n    INGAME_MODE_WAIT_MSN0 = 24\n};\n</code></pre>"},{"location":"Fatal_Frame_1/Game/Ingame/Ingame/#process-of-initalization","title":"Process of Initalization","text":"<p>The process of Initalization starts wtih mode <code>INGAME_MODE_INIT</code> Calls InGameInit Where all ingame engine initalization's occur prior to the title screen. Most notably loads Player data, preloads Model data, initalizes the event system  And most other systems as well.</p> <p>Then we continue to <code>INGAME_MODE_MSN_TITLE</code> InGameInit2 is called Stage data, Camera data, all rendering systes are loaded here. Memory Card data will have already been read prior to this being called and the player set into the scene.</p>"},{"location":"Fatal_Frame_1/Game/Ingame/Ingame/#missions","title":"Missions","text":""},{"location":"Fatal_Frame_1/Game/Ingame/Ingame/#zero-hour","title":"Zero Hour","text":"<p>Mafuyu, Miku's older brother is playable in this mode, and this mode only. Features it's own Battle System found mainly in <code>ap_zgost.c</code>, <code>ZeroHourAppearMain</code> being the main spawn logic for it. Appears to feature it's own physics logic that does not apply to Miku. Mission uses black and white filter effect over screen that is used throught many scenes of the game. Force activating the debug menu allows this filter to be turned on and off at a whim.</p>"},{"location":"Fatal_Frame_1/Game/Ingame/Ingame/#miku-missions-nights-1-2-3-4","title":"Miku Missions, Nights 1, 2, 3, 4","text":"<p>The main logic of the game. All Standard modes, battle functions, events, room transitions, etc apply here.</p> <ul> <li> <p><code>INGAME_MODE_NORMAL</code>: The main game loop. Player control and gameplay stuff occurs in here. This will also check for the BattleModeGame if the player has previously completed this game and selected it.</p> </li> <li> <p><code>INGAME_MODE_EVENT</code>: Calls EventMain Event system is run here. Will be talked about in more detail in other documentation. Needless to say, this wrenches control from main game loop and subsuqently player.</p> </li> <li> <p><code>INGAME_MODE_SPECIAL_EVENT</code>: Special events consist of several different types and functions. Though most notable are the ingame puzzles</p> </li> <li> <p>Star Puzzle (The Sliding Stone game)</p> </li> <li>Dial Key Door (The Number lock combination doors)</li> <li>Doll Puzzle (Kaaggommee, Kaaggommee) - Used only a single time in Night 2</li> </ul> <p>At least some of these have their own list of files on disc for hard coded puzzles. Each of these each have their own seperate game loop that takes inputs.</p>"},{"location":"Fatal_Frame_2/Engine/Engine/","title":"Engine","text":""},{"location":"Fatal_Frame_2/Engine/Engine/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Fatal_Frame_2/Engine/3D/SGD/","title":"SGD","text":"<p>hello</p>"},{"location":"Fatal_Frame_2/Game/GPhaseSystem/","title":"Summary","text":"<p>The game uses a <code>GPhaseSystem</code> to split the logic into game sections. It is located under the gphase.cpp file. Please note that all of the following information is pulled from the PAL version of the game. The PAL version has a few more states than the NTSC versions:</p>"},{"location":"Fatal_Frame_2/Game/GPhaseSystem/#pal-specific-states","title":"PAL Specific States:","text":"<ol> <li>A language selection upon first boot (<code>GID_LANGSEL_MAIN</code>)</li> <li>A screen refresh rate selector (<code>GID_TITLE_FRAMERATE_SEL</code>)</li> <li>A boot video of Ubisoft's logo (<code>GID_TITLE_MOVE_MOVIE</code>)</li> </ol>"},{"location":"Fatal_Frame_2/Game/GPhaseSystem/#basic-components","title":"Basic Components","text":""},{"location":"Fatal_Frame_2/Game/GPhaseSystem/#game-phases","title":"Game Phases","text":"<p>In Fatal Frame 2, a <code>Game Phase (GPhase)</code> represents the current action <code>(phase)</code> the game is currently performing. Each phase serves to handle a particular part of the game such as loading the game, menu traversal, selecting a lanaguage, and so on... A <code>GPhase</code> is represented by a <code>GPHASE_ID_ENUM</code>, an enum that contains all possible game phases (see list below). Those phases also have handler functions that will contain all code to perform the action!</p> List Of GPhases <pre><code>/// Game Phases (GPHASE) of the game.\n/// Used to layout the game logic and group functions goals.\nenum GPHASE_ID_ENUM : int\n{\n  GID_SUPER                     = 0,\n  GID_BOOT_INIT                 = 1,\n  GID_BOOT_PADCHECK             = 2, /// EU ONLY\n  GID_LANGDATA_CHECK            = 3, /// EU ONLY\n  GID_LANGSEL_MAIN              = 4, /// EU ONLY\n  GID_AUTOLOAD_MAIN             = 5,\n  GID_UBI_MODE                  = 6, /// EU ONLY\n  GID_OUTGAME_MAIN              = 7,\n  GID_STORY_MAIN                = 8,\n  GID_GAMEOVER_MENU             = 9,\n  GID_ENDING_MOVIE              = 10,\n  GID_GAMERESULT                = 11,\n  GID_CLEARMENU                 = 12,\n  GID_SOFTRESETMAIN             = 13,\n  GID_DEBUG_MENU                = 14,\n  GID_TECMO_MODE                = 15,\n  GID_PROJECT_MODE              = 16,\n  GID_TITLE_MODE                = 17,\n  GID_TITLE_MOVIE_MODE          = 18,\n  GID_STORY_NOWLOADING          = 19,\n  GID_STORY_NORMAL              = 20,\n  GID_STORY_DAMAGE              = 21,\n  GID_STORY_DOOR_OPEN           = 22,\n  GID_STORY_DEBUG               = 23,\n  GID_STORY_DEBUG_CAM           = 24,\n  GID_STORY_PAUSE               = 25,\n  GID_STORY_PAUSE_MISSION       = 26,\n  GID_STORY_MENU                = 27,\n  GID_STORY_MAP                 = 28,\n  GID_STORY_MISSION_ST          = 29,\n  GID_STORY_MISSION_RESULT      = 30,\n  GID_STORY_GAME_OVER_PRE       = 31,\n  GID_STORY_GAME_OVER           = 32,\n  GID_STORY_SCENE               = 33,\n  GID_STORY_MOVIE               = 34,\n  GID_STORY_EFFECT              = 35,\n  GID_EVENTMSG_DISP             = 36,\n  GID_EVENTFILE_DISP            = 37,\n  GID_STORY_PHOTO               = 38,\n  GID_STORY_ENE_DEAD            = 39,\n  GID_STORY_PUZZLE              = 40,\n  GID_STORY_SAVEPOINT           = 41,\n  GID_STORY_MOVIE_ROOM_SEL      = 42,\n  GID_GAMEOVER_MENU_TOP         = 43,\n  GID_GAMEOVER_MENU_LOAD        = 44,\n  GID_GAMEOVER_MENU_ALBUM       = 45,\n  GID_ENDING_NORMAL1            = 46,\n  GID_ENDING_NORMAL2            = 47,\n  GID_ENDING_HARD               = 48,\n  GID_GAMERESULT_TOP            = 49,\n  GID_CLEARMENU_TOP             = 50,\n  GID_CLEARMENU_SAVE            = 51,\n  GID_CLEARMENU_ALBUM           = 52,\n  GID_TITLE_TOP                 = 53,\n  GID_TITLE_MENU                = 54,\n  GID_TITLE_NEWGAME             = 55,\n  GID_TITLE_LOADGAME            = 56,\n  GID_TITLE_SETUP               = 57,\n  GID_TITLE_ALBUM               = 58,\n  GID_TITLE_GALLERY             = 59,\n  GID_TITLE_OPTION              = 60,\n  GID_TITLE_FRAMERATE_SEL       = 61, /// EU ONLY\n  GID_TITLE_CHAPTER_SEL         = 62,\n  GID_TITLE_MOVE_MOVIE          = 63, /// EU ONLY\n  GID_STORY_LOAD_MISSION        = 64,\n  GID_STORY_LOAD_MISSION_EVENT  = 65,\n  GID_STORY_LOAD_MISSION_SAVE   = 66,\n  GID_STORY_GAMEOVER_EFF        = 67,\n  GID_STORY_GAMEOVER_FADE       = 68,\n  GID_STORY_GAMEOVER_MOVIE      = 69,\n  GID_STORY_SCENE_PRELOAD       = 70,\n  GID_STORY_SCENE_MAIN          = 71,\n  GID_STORY_MOVIE_PRELOAD       = 72,\n  GID_STORY_MOVIE_MAIN          = 73,\n  GID_PUZZLE_INCONF             = 74,\n  GID_PUZZLE_CROSSFADE          = 75,\n  GID_PUZZLE_HINA               = 76,\n  GID_PUZZLE_ROKU               = 77,\n  GID_PUZZLE_KAZA               = 78,\n  GID_PUZZLE_KAZA2              = 79,\n  GID_PUZZLE_KAI1               = 80,\n  GID_PUZZLE_KAI2               = 81,\n  GID_SAVEPOINT_FADEIN          = 82,\n  GID_SAVEPOINT_MAIN            = 83,\n  GID_SAVEPOINT_FADEOUT         = 84,\n  GID_TITLE_SETUPMENU           = 85,\n  GID_TITLE_MISSION             = 86,\n  GID_SAVEPOINT_TOP             = 87,\n  GID_SAVEPOINT_SAVE            = 88,\n  GID_SAVEPOINT_ALBUM           = 89,\n  GID_MISSION_SEL               = 90,\n  GID_MISSION_CAM               = 91,\n  GID_MISSION_ALBUM             = 92,\n  GID_MISSION_SAVE              = 93,\n  GPHASE_ID_NONE                = -1\n};\n</code></pre>"},{"location":"Fatal_Frame_2/Game/GPhaseSystem/#layers","title":"Layers","text":"<p>In Fatal Frame 2, a layer (<code>GPHASE_LAYER</code>) represents the game's current phase in a category. Those layers regroup a collection of <code>GPHASE_ID_ENUM</code> (see Game Phases) that are related to a common section of the game. For example, some phases are related to the initialization of the game which are under the layer <code>GAME_INIT</code>. Take note that the game does not use any enum definitions for those but simply <code>int</code>. As such, I extracted this information based on my knowledge of the game. This might change later as I get a better understanding of the code.</p> The 6 Layers <pre><code>/// Regroups game logic into game modes or utilities.\nenum GPHASE_LAYER : int\n{\n  /// GPHASE: 0\n  SYSTEM_INIT,\n\n  /// GPHASE: 1 - 10\n  GAME_INIT,\n\n  /// GPHASE: 11 - 48\n  STORY,\n\n  /// GPHASE: 49 - 78\n  TITLE,\n\n  /// GPHASE: 79 - 83\n  SAVE,\n\n  /// GPHASE: 84 - 88\n  MISSION\n};\n</code></pre>"},{"location":"Fatal_Frame_2/Game/GPhaseSystem/#states","title":"States","text":"<p>A GPhase state (or <code>GPHASE_ENUM</code>) indicates the state of the game for the current frame and is usually the value returned by GPhase state handling functions (see the following section).</p> List Of GPhase Status <pre><code>enum GPHASE_ENUM : int\n{\n  GPHASE_CONTINUE   = 0,\n  GPHASE_END        = 1,\n  GPHASE_NOFRAME    = 2\n};\n</code></pre>"},{"location":"Fatal_Frame_2/Game/GPhaseSystem/#handler-functions","title":"Handler Functions","text":"<p>Each <code>GPHASE</code> has 4 handler methods: <code>ini_func</code>, <code>pre_func</code>, <code>after_func</code> and <code>end_func</code>. The order of execution goes as follows:</p> <ol> <li><code>ini</code> -&gt; handles initialization of variables/memory allocation</li> <li><code>pre</code> -&gt; handles logic before calling son</li> <li>If this phase has a son -&gt; go to step 1 for son; Otherwise continue to next step</li> <li><code>after</code> -&gt; handles logic after calling son</li> <li><code>end</code> -&gt; handles freeing allocated memory and resetting values</li> </ol> <p><code>ini_func</code> and <code>pre_func</code> have no arguments while <code>after_func</code> and <code>end_func</code> take a <code>GPHASE_ID</code> as an argument and return a value of <code>GPHASE_ENUM</code>. Only the <code>pre</code> handler can have a <code>nullptr</code> as a method. However, since this repo will not have all reversed code at the same time additionnal checks for <code>nullptr</code> have been added to other handler calls.</p> <p>When implementing a new <code>GPHASE</code>, make sure to add your functions to the array of the appropriate <code>xx_func</code> and ABSOLUTELY make sure that the function's position/index in the array is the same as the <code>GPHASE_ID</code>.</p> Sample Of Ini, End, Pre, And After Functions <pre><code>void (*ini_func[gphase_num])() =\n    {\n        init_super,\n        init_Boot_Init,\n        (...)\n};\n\nvoid (*end_func[gphase_num])() =\n    {\n        end_super,\n        end_Boot_Init,\n        (...)\n};\n\nGPHASE_ENUM (*pre_func[gphase_num])(GPHASE_ID) =\n    {\n        pre_super,\n        nullptr,\n        (...)\n};\n\nGPHASE_ENUM (*after_func[gphase_num])(GPHASE_ID) =\n    {\n        after_super,\n        one_Boot_Init,\n        (...)\n};\n\n// Implementation of the methods defined above\n\nvoid init_super()\n{\n  InitLogging();\n  InitCostume();\n  soft_reset_disable = 0;\n  InitSystemON();\n  playPssInit();\n  InitLogo();\n  LoadingInit();\n  TitleInit();\n  InitOptionSetup(&amp;opt_wrk);\n}\n\nvoid end_super()\n{\n  return;\n}\n\nGPHASE_ENUM after_super(GPHASE_ENUM result)\n{\n  EachDebugMain();\n  ee_iopMain();\n  SendDMAMain();\n  return (GPHASE_ENUM)(CheckSoftReset() != 0);\n}\n\nGPHASE_ENUM pre_super(GPHASE_ENUM super)\n{\n  // Do stuff...\n  return GPHASE_CONTINUE;\n}\n</code></pre> <p>Take note that the <code>SUPER GPHASE (GID_SUPER)</code> is at position 0/ is the first element just like its enum.</p>"},{"location":"Fatal_Frame_2/Game/GPhaseSystem/#structured-gphase-data","title":"Structured GPhase Data","text":""},{"location":"Fatal_Frame_2/Game/GPhaseSystem/#structure-definitions","title":"Structure Definitions:","text":""},{"location":"Fatal_Frame_2/Game/GPhaseSystem/#gphase_dat","title":"GPHASE_DAT","text":"<p>The <code>GPHASE_DAT</code> structure contains all information related to a game phase. The layer indicates to which layer a game phase belongs to. <code>superID</code> indicates the parent of that phase. <code>son_ID</code> indicates the child of a game phase and <code>son_num</code> indicates how many children a game phase has.</p> Definition Of GPHASE_DAT <pre><code>struct GPHASE_DAT\n{\n  int layer;\n  int superID;\n  int son_ID;\n  int son_num;\n};\n</code></pre>"},{"location":"Fatal_Frame_2/Game/GPhaseSystem/#gphase_sys","title":"GPHASE_SYS","text":"<p><code>GPHASE_SYS</code> is a structure that stores the current phase of the game, the next one and some execution flag. At this moment I do not know more than that.</p> Definition Of GPHASE_SYS <pre><code>struct GPHASE_SYS\n{\n  GPHASE_ID_ENUM now[gphase_sys_num];\n  GPHASE_ID_ENUM next[gphase_sys_num];\n  int ini_flg[gphase_sys_num];\n};\n</code></pre> Full List Of GPHASE_SYS <pre><code>const GPHASE_DAT gphase_tbl[gphase_num] = {\n/// Layers,     Supuper ID  ,           Son ID       , Son Num\n    {0,       GPHASE_ID_NONE,           GID_BOOT_INIT, 14},\n    {1,            GID_SUPER,          GPHASE_ID_NONE,  0},\n    {1,            GID_SUPER,          GPHASE_ID_NONE,  0},\n    {1,            GID_SUPER,          GPHASE_ID_NONE,  0},\n    {1,            GID_SUPER,          GPHASE_ID_NONE,  0},\n    {1,            GID_SUPER,          GPHASE_ID_NONE,  0},\n    {1,            GID_SUPER,          GPHASE_ID_NONE,  0},\n    {1,            GID_SUPER,          GID_TECMO_MODE,  4},\n    {1,            GID_SUPER,    GID_STORY_NOWLOADING, 24},\n    {1,            GID_SUPER,   GID_GAMEOVER_MENU_TOP,  3},\n    {1,            GID_SUPER,      GID_ENDING_NORMAL1,  3},\n    {1,            GID_SUPER,      GID_GAMERESULT_TOP,  1},\n    {1,            GID_SUPER,       GID_CLEARMENU_TOP,  3},\n    {1,            GID_SUPER,          GPHASE_ID_NONE,  0},\n    {1,            GID_SUPER,          GPHASE_ID_NONE,  0},\n    {2,     GID_OUTGAME_MAIN,          GPHASE_ID_NONE,  0},\n    {2,     GID_OUTGAME_MAIN,          GPHASE_ID_NONE,  0},\n    {2,     GID_OUTGAME_MAIN,           GID_TITLE_TOP, 11},\n    {2,     GID_OUTGAME_MAIN,          GPHASE_ID_NONE,  0},\n    {2,       GID_STORY_MAIN,  GID_STORY_LOAD_MISSION,  3},\n    {2,       GID_STORY_MAIN,          GPHASE_ID_NONE,  0},\n    {2,       GID_STORY_MAIN,          GPHASE_ID_NONE,  0},\n    {2,       GID_STORY_MAIN,          GPHASE_ID_NONE,  0},\n    {2,       GID_STORY_MAIN,          GPHASE_ID_NONE,  0},\n    {2,       GID_STORY_MAIN,          GPHASE_ID_NONE,  0},\n    {2,       GID_STORY_MAIN,          GPHASE_ID_NONE,  0},\n    {2,       GID_STORY_MAIN,          GPHASE_ID_NONE,  0},\n    {2,       GID_STORY_MAIN,          GPHASE_ID_NONE,  0},\n    {2,       GID_STORY_MAIN,          GPHASE_ID_NONE,  0},\n    {2,       GID_STORY_MAIN,          GPHASE_ID_NONE,  0},\n    {2,       GID_STORY_MAIN,          GPHASE_ID_NONE,  0},\n    {2,       GID_STORY_MAIN,          GPHASE_ID_NONE,  0},\n    {2,       GID_STORY_MAIN,  GID_STORY_GAMEOVER_EFF,  3},\n    {2,       GID_STORY_MAIN, GID_STORY_SCENE_PRELOAD,  2},\n    {2,       GID_STORY_MAIN, GID_STORY_MOVIE_PRELOAD,  2},\n    {2,       GID_STORY_MAIN,          GPHASE_ID_NONE,  0},\n    {2,       GID_STORY_MAIN,          GPHASE_ID_NONE,  0},\n    {2,       GID_STORY_MAIN,          GPHASE_ID_NONE,  0},\n    {2,       GID_STORY_MAIN,          GPHASE_ID_NONE,  0},\n    {2,       GID_STORY_MAIN,          GPHASE_ID_NONE,  0},\n    {2,       GID_STORY_MAIN,       GID_PUZZLE_INCONF,  8},\n    {2,       GID_STORY_MAIN,    GID_SAVEPOINT_FADEIN,  3},\n    {2,       GID_STORY_MAIN,          GPHASE_ID_NONE,  0},\n    {2,    GID_GAMEOVER_MENU,          GPHASE_ID_NONE,  0},\n    {2,    GID_GAMEOVER_MENU,          GPHASE_ID_NONE,  0},\n    {2,    GID_GAMEOVER_MENU,          GPHASE_ID_NONE,  0},\n    {2,     GID_ENDING_MOVIE,          GPHASE_ID_NONE,  0},\n    {2,     GID_ENDING_MOVIE,          GPHASE_ID_NONE,  0},\n    {2,     GID_ENDING_MOVIE,          GPHASE_ID_NONE,  0},\n    {2,       GID_GAMERESULT,          GPHASE_ID_NONE,  0},\n    {2,        GID_CLEARMENU,          GPHASE_ID_NONE,  0},\n    {2,        GID_CLEARMENU,          GPHASE_ID_NONE,  0},\n    {2,        GID_CLEARMENU,          GPHASE_ID_NONE,  0},\n    {3,       GID_TITLE_MODE,          GPHASE_ID_NONE,  0},\n    {3,       GID_TITLE_MODE,          GPHASE_ID_NONE,  0},\n    {3,       GID_TITLE_MODE,          GPHASE_ID_NONE,  0},\n    {3,       GID_TITLE_MODE,          GPHASE_ID_NONE,  0},\n    {3,       GID_TITLE_MODE,     GID_TITLE_SETUPMENU,  2},\n    {3,       GID_TITLE_MODE,          GPHASE_ID_NONE,  0},\n    {3,       GID_TITLE_MODE,          GPHASE_ID_NONE,  0},\n    {3,       GID_TITLE_MODE,          GPHASE_ID_NONE,  0},\n    {3,       GID_TITLE_MODE,          GPHASE_ID_NONE,  0},\n    {3,       GID_TITLE_MODE,          GPHASE_ID_NONE,  0},\n    {3,       GID_TITLE_MODE,          GPHASE_ID_NONE,  0},\n    {3, GID_STORY_NOWLOADING,          GPHASE_ID_NONE,  0},\n    {3, GID_STORY_NOWLOADING,          GPHASE_ID_NONE,  0},\n    {3, GID_STORY_NOWLOADING,          GPHASE_ID_NONE,  0},\n    {3,  GID_STORY_GAME_OVER,          GPHASE_ID_NONE,  0},\n    {3,  GID_STORY_GAME_OVER,          GPHASE_ID_NONE,  0},\n    {3,  GID_STORY_GAME_OVER,          GPHASE_ID_NONE,  0},\n    {3,      GID_STORY_SCENE,          GPHASE_ID_NONE,  0},\n    {3,      GID_STORY_SCENE,          GPHASE_ID_NONE,  0},\n    {3,      GID_STORY_MOVIE,          GPHASE_ID_NONE,  0},\n    {3,      GID_STORY_MOVIE,          GPHASE_ID_NONE,  0},\n    {3,     GID_STORY_PUZZLE,          GPHASE_ID_NONE,  0},\n    {3,     GID_STORY_PUZZLE,          GPHASE_ID_NONE,  0},\n    {3,     GID_STORY_PUZZLE,          GPHASE_ID_NONE,  0},\n    {3,     GID_STORY_PUZZLE,          GPHASE_ID_NONE,  0},\n    {3,     GID_STORY_PUZZLE,          GPHASE_ID_NONE,  0},\n    {3,     GID_STORY_PUZZLE,          GPHASE_ID_NONE,  0},\n    {3,     GID_STORY_PUZZLE,          GPHASE_ID_NONE,  0},\n    {3,     GID_STORY_PUZZLE,          GPHASE_ID_NONE,  0},\n    {3,  GID_STORY_SAVEPOINT,          GPHASE_ID_NONE,  0},\n    {3,  GID_STORY_SAVEPOINT,       GID_SAVEPOINT_TOP,  3},\n    {3,  GID_STORY_SAVEPOINT,          GPHASE_ID_NONE,  0},\n    {4,      GID_TITLE_SETUP,          GPHASE_ID_NONE,  0},\n    {4,      GID_TITLE_SETUP,         GID_MISSION_SEL,  4},\n    {4,   GID_SAVEPOINT_MAIN,          GPHASE_ID_NONE,  0},\n    {4,   GID_SAVEPOINT_MAIN,          GPHASE_ID_NONE,  0},\n    {4,   GID_SAVEPOINT_MAIN,          GPHASE_ID_NONE,  0},\n    {5,    GID_TITLE_MISSION,          GPHASE_ID_NONE,  0},\n    {5,    GID_TITLE_MISSION,          GPHASE_ID_NONE,  0},\n    {5,    GID_TITLE_MISSION,          GPHASE_ID_NONE,  0},\n    {5,    GID_TITLE_MISSION,          GPHASE_ID_NONE,  0}\n};\n</code></pre>"}]}